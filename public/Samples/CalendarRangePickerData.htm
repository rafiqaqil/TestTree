<!DOCTYPE html>
<html lang="en">
  <head>
    <title>CSV Heatmap Date Range Picker Chart | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/icons/material/maps/directions-walk.js"></script>
    <script type="text/javascript" src="../jsc/icons/material/hardware/keyboard-arrow-left.js"></script>
    <script type="text/javascript" src="../jsc/icons/material/hardware/keyboard-arrow-right.js"></script>
    <script type="text/javascript" src="../jsc/modules/types.js"></script>
    <script type="text/javascript" src="../jsc/modules/toolbar.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />
    <style type="text/css">
      /*CSS*/
      .inputEl {
        width: 112px;
        display: inline-block;
        font-family: arial;
        font-size: 14px;
        background-color: #f7f7f7;

        border: 0px solid gray;
        border-radius: 4px;
        height: 20px;
      }
      .inputsWrapper {
        margin-left: 32px;
        height: 23px;

        border: 1px solid gray;
        border-radius: 5px;
        padding: 5px;
        width: 290px;
      }
      #picker {
        display: none;
        margin-top: 5px;
        margin-left: -9px;
        z-index: 1;
        position: absolute;
        width: 368px;
        height: 371px;
        background-color: white;

        -webkit-box-shadow: 3px 3px 20px 3px #ccc;
        -moz-box-shadow: 3px 3px 20px 3px #ccc;
        box-shadow: 3px 3px 20px 3px #ccc;
      }
      #pickerContainer {
        width: 350px;
        margin-left: 10px;

        padding: 9px;
      }
      .opened {
        background-color: #ffffff;
        height: 35px;
      }
      .activeEl {
        background-color: #c6d4ff;
      }
    </style>
  </head>
  <body>
    <div id="pickerContainer">
      <div class="inputsWrapper">
        <input id="startDate" autocomplete="off" class="inputEl" type="text" value="Start Date" />
        <input id="endDate" autocomplete="off" class="inputEl" style="margin-left:30px" type="text" value="End Date" />
      </div>
      <div id="picker">
        <div id="chartDiv" style="max-width: 300px;height: 300px;margin: 0px auto;"></div>
      </div>
      <div></div>
    </div>
    <div id="chartDiv2" style="max-width: 740px;height:400px;margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
A fully functional heatmap calendar date range picker that controls a line chart.
Learn how to:

  - Implement a date range picker that controls a line chart.
*/
      // JS
      var chart = undefined,
        lineChart = undefined,
        titleAnnotation = undefined,
        dateRange = [new Date('1/1/2017'), new Date('12/31/2017')],
        curDate = dateRange[0],
        picking,
        chartConfig = {
          debug: true,
          type: 'calendar month solid',
          margin_bottom: 10,
          width: 300,
          height: 350,
          title_label_verticalAlign: 'middle',
          animation_duration: 150,
          defaultTooltip_enabled: false,
          box_fill: 'none',
          defaultBox_boxVisible: false,
          calendar: {
            defaultEmptyPoint_legendEntry_visible: false
          },
          annotations: [
            {
              width: 200,
              label: {
                align: 'center',
                text: formatTitle(dateRange[0]),
                style_fontSize: 15
              },
              position: 'top'
            }
          ],
          yAxis_visible: false,
          palette_colorBar_axis_scale_interval: 5000,
          legend: {
            offset: '0,14',
            position: 'bottom',
            boxVisible: false
          },
          highlights: [
            {
              pattern: { weekday: [0, 6] },
              fill: '#ffedc4',
              outline_color: '#bcbcbc',
              outline_width: 0
            }
          ],
          defaultSeries: {
            shape_innerPadding: 0,
            legendEntry_visible: false,
            opacity: 0.9,
            defaultPoint: {
              legendEntry_visible: false,
              events: {
                click: pointClick,
                mouseOver: pointOver
              }
            }
          },

          toolbar_items: {
            export_visible: false,
            backward: {
              position: 'top left',
              fill: 'white',
              icon_name: 'material/hardware/keyboard-arrow-left',
              events_click: function() {
                var d = new Date(curDate);
                zoomTo(d.setMonth(d.getMonth() - 1));
              }
            },
            forward: {
              position: 'top right',
              fill: 'white',
              icon_name: 'material/hardware/keyboard-arrow-right',
              events_click: function() {
                var d = new Date(curDate);
                zoomTo(d.setMonth(d.getMonth() + 1));
              }
            },
            reset: {
              label: {
                text: 'Clear Dates',
                color: '#e34e2f',
                offset: '0,-4'
              },
              margin: 5,
              boxVisible: false,
              position: 'bottom right',
              visible: false,
              events_click: function() {
                reset();
              }
            }
          }
        };

      //Note: HTML elements must be rendered before making references..
      var elementRefs = {
          startDate: document.getElementById('startDate'),
          endDate: document.getElementById('endDate'),
          pickerContainer: document.getElementById('pickerContainer'),
          picker: document.getElementById('picker')
        },
        datesPicked = { start: undefined, end: undefined },
        selectorColor = '#5264cb',
        //Blackout dates loaded from csv file.
        tempData = undefined;

      initPicker();

      function initPicker() {
        JSC.fetch('./resources/stepData17-18.csv').then(function(response) {
          if (response.ok) {
            response
              .text()
              .then(function(text) {
                var parsedData = JSC.parseCsv(text);

                return parsedData.data;
              })
              .then(function(data) {
                tempData = data;
                chartConfig.data = tempData.slice(0);
                chart = JSC.chart('chartDiv', chartConfig);
              });
          } else {
            console.error('Problem loading csv data.');
          }
        });

        elementRefs.pickerContainer.addEventListener('click', function(ev) {
          ev.stopPropagation();
        });
        window.addEventListener('click', function() {
          highlightInput();
          closePicker();
        });
      }

      /**
       * Date Utils
       */
      function toDate(v) {
        return new Date(v);
      }
      function formatTitle(date) {
        return (
          '<icon verticalAlign=middle name=material/maps/directions-walk outerShape=circle size=30 padding=5 fill="#36A6E6"> ' +
          new Date(date).toLocaleDateString('en', { month: 'long', year: 'numeric' })
        );
      }
      function addOneDay(date) {
        var d = toDate(date);
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() + 1).getTime();
      }
      function formatDate(d) {
        return JSC.formatDate(d, 'd');
      }

      /**
       * Picked dates utils
       */
      function reset() {
        datesPicked = { start: undefined, end: undefined };
        picking = 'start';
        highlightInput(elementRefs.startDate);
        updateInputs();
        highlightDates();
        updateAvailability(chart);
        updateReset();
      }
      function pickedDates() {
        var dates = [];
        datesPicked.start && dates.push(datesPicked.start);
        datesPicked.end && dates.push(datesPicked.end);
        return dates;
      }
      function pickedCount() {
        var count = 0;
        datesPicked.end && count++;
        datesPicked.start && count++;
        return count;
      }

      /**
       * Chart event handlers
       */

      function pointClick() {
        var point = this;
        var clickedDate = point.tokenValue('%date');
        if (picking === 'end') {
          datesPicked.end = clickedDate;
          if (pickedCount() < 2) {
            highlightInput(elementRefs.startDate);
            picking = 'start';
          } else {
            picking = 'none';
            highlightDates();
          }
        } else {
          datesPicked.start = clickedDate;
          highlightInput(elementRefs.endDate);
          highlightDates();
          picking = 'end';
        }
        updateInputs();
        if (picking == 'none') {
          //Clear highligh

          highlightInput();
          closePicker();
        }
        updateAvailability(chart);
        updateReset();

        updateLineChart();
        //Disable any default point click behavior.
        return false;
      }
      function pointOver() {
        var point = this;
        var pointDate = point.tokenValue('%date');
        //If another point is hovered while only one date is selected, update the highlight
        if (pickedCount() === 1) {
          highlightDates(pointDate);
        }
      }

      /**
       * Update chart functions
       */
      //Update possible checkout dates
      function updateAvailability(chartRef) {
        /*Nothing to update*/
      }

      function getHighlightCfg(hoverDate) {
        var cfg,
          dateVal,
          dates = pickedDates(),
          isFinalRange = dates.length === 2;

        //Include hoverDate in highlight range
        hoverDate && dates.push(hoverDate) && dates.sort();
        cfg = {
          id: 'selection',
          fill: isFinalRange ? selectorColor : '#c3d2ff',
          outline: { color: selectorColor, dashStyle: isFinalRange ? 'solid' : 'dash' }
        };

        //Highlight date or range
        dateVal = dates.length === 1 ? dates[0] : { range: dates };
        if (dates.length) {
          cfg.pattern = { date: dateVal };
        }
        return cfg;
      }
      function highlightDates(hoverDate) {
        var hl, //dates = selectedDates,
          updateOptions = hoverDate ? { animation: { duration: 0 } } : {};
        hl = chart.highlights('selection');
        if (pickedCount() || hoverDate) {
          let config = getHighlightCfg(hoverDate);
          if (hl) {
            hl.options(config, updateOptions);
          } else {
            chart.highlights.add(config, updateOptions);
          }
        } else if (hl) {
          hl.remove();
        }
      }
      function zoomTo(d) {
        var d = new Date(d);
        if (d >= dateRange[0] && d <= dateRange[1] && d.getMonth() != curDate.getMonth()) {
          titleAnnotation = titleAnnotation || chart.annotations(0);
          titleAnnotation.options({ label_text: formatTitle(d) }, { animation: { duration: 0 } });
          chart.zoom(d);
          curDate = d;
        }
      }
      function updateReset() {
        chart.uiItems('reset').options({ visible: !!pickedCount() });
      }

      /**
       * Update HTML Elements
       */
      function updateInputs() {
        elementRefs.startDate.value = datesPicked.start ? formatDate(datesPicked.start) : 'Start Date';
        elementRefs.endDate.value = datesPicked.end ? formatDate(datesPicked.end) : 'End Date';
      }
      function updateDatePicker(el) {
        if (el === startDate) {
          datesPicked.start = new Date(elementRefs.startDate.value).getTime();
        } else {
          datesPicked.end = new Date(elementRefs.endDate.value).getTime();
        }
        highlightDates();
      }
      function inputClicked(el) {
        clickedInput = el;
        picking = el === elementRefs.startDate ? 'start' : 'end';
        highlightInput(el);
        openPicker();
        //Zoom chart to date in clicked text input.
        zoomTo(el.value);
        updateAvailability(chart);
      }
      function highlightInput(el) {
        if (el !== elementRefs.startDate) {
          elementRefs.startDate.classList.remove('activeEl');
        }
        if (el !== elementRefs.endDate) {
          elementRefs.endDate.classList.remove('activeEl');
        }
        if (el) {
          el.classList.add('activeEl');
        }
      }
      function openPicker() {
        elementRefs.picker.style.display = 'block';
        elementRefs.pickerContainer.classList.add('opened');
      }
      function closePicker() {
        elementRefs.picker && (elementRefs.picker.style.display = 'none');
        elementRefs.pickerContainer.classList.remove('opened');
      }

      function updateLineChart() {
        if (!lineChart) {
          lineChart = new JSC.Chart('chartDiv2', {
            type: 'line',
            animation_duration: 800,
            xAxis_scale_type: 'time',
            legend: {
              boxVisible: false,
              position: 'inside top'
            },
            defaultSeries: {
              legendEntry_value: 'Total: %sum',
              line_width: 2,
              states_hover_line_width: 2,
              defaultPoint: { marker_visible: false }
            },

            series: [{}]
          });
        }

        var values = cullData();
        lineChart.series(0).options({
          points: values.map(function(row) {
            return { x: row[0], y: row[1] };
          })
        });

        function cullData() {
          return tempData.filter(function(row) {
            var rowDate = toDate(row[0]);
            return rowDate >= datesPicked.start && rowDate <= datesPicked.end;
          });
        }
      }

      function attachEvents() {
        var startDateElement = document.getElementById('startDate');
        var endDateElement = document.getElementById('endDate');

        startDateElement.addEventListener('keyup', function() {
          return updateDatePicker(startDateElement);
        });
        startDateElement.addEventListener('click', function() {
          return inputClicked(startDateElement);
        });

        endDateElement.addEventListener('keyup', function() {
          return updateDatePicker(endDateElement);
        });
        endDateElement.addEventListener('click', function() {
          return inputClicked(endDateElement);
        });
      }

      attachEvents();
    </script>
  </body>
</html>
