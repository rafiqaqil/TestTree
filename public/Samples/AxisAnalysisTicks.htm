<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Axis Analysis Ticks | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/modules/toolbar.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />
    <style type="text/css"></style>
  </head>
  <body>
    <div id="chartDiv" style="max-width: 740px;height: 400px;margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
Dynamically updates chart data in real-time. Dynamic axis ticks display calculations that stay in sync.
Learn how to:

  - Dynamic Axis Ticks.
  - Hidden Axis Ticks.
*/
      // JS
      var dt = new Date(2017, 0, 15).getTime(),
        cnt = 0,
        lastVal = 126,
        useShift = true;
      var INTERVAL_ID = null;

      var chart = JSC.chart(
        'chartDiv',
        {
          debug: true,
          legend_visible: false,
          animation_duration: 200,
          xAxis_scale_type: 'time',
          title_label_text: 'Dynamic calculation ticks',
          yAxis: [
            { id: 'ax1', formatString: 'n0' },
            {
              id: 'ax2',
              orientation: 'right',
              alternateGridFill: 'none',
              defaultTick: {
                enabled: false,
                includeInScale: true,
                label: { style_fontSize: '13px', color: 'green' },
                gridLine: { color: 'orange', width: 0, dashStyle: 'dash' }
              },
              scale: { syncWith: 'ax1' },
              customTicks: [
                {
                  value: '%average',
                  label_text: 'Average<br/>{%value:n2}',
                  gridLine: { width: 1, color: 'orange' }
                },
                {
                  value: '%max',
                  label_text: 'Max<br/>{%value:n2}'
                },
                {
                  value: '%min',
                  label_text: 'Min<br/>{%value:n2}'
                }
              ],
              markers: [
                {
                  label: {
                    text: 'Range ({%min:n2}â€“{%max:n2}) <b>{%max-%min:n2}</b>',
                    verticalAlign: 'top'
                  },
                  value: ['%min', '%max'],
                  color: ['orange', 0.5]
                }
              ]
            }
          ],
          series: [
            {
              id: 's1',
              name: 'Purchases',
              type: 'line',
              defaultPoint: {
                marker: { fill: 'white', outline: { width: 2 } }
              },
              points: [
                ['1/1/2017', 29.9],
                ['1/2/2017', 71.5],
                ['1/3/2017', 106.4],
                ['1/6/2017', 129.2],
                ['1/7/2017', 144.0],
                ['1/8/2017', 176.0],
                ['1/9/2017', 126.0],
                ['1/10/2017', 113.0],
                ['1/11/2017', 93.0],
                ['1/12/2017', 13.0],
                ['1/13/2017', 86.0],
                ['1/14/2017', 126.0]
              ]
            }
          ],
          toolbar: {
            items: {
              'Shift Values': {
                type: 'checkbox',
                value: true,
                tooltip:
                  'The shift option determines whether the first point in the series is removed when adding a new point.',
                events: { change: shiftPoints_btnClick }
              },
              Stop: {
                type: 'option',
                icon_name: 'system/default/pause',
                boxVisible: true,
                label_text: 'Pause',
                events: { change: playPause },
                states_select_label_text: 'Play',
                states_select_icon_name: 'system/default/play'
              }
            }
          }
        },
        startUpdate
      );

      function playPause(val) {
        if (val === true) {
          clearInterval(INTERVAL_ID);
        } else {
          startUpdate();
        }
      }

      /**
       * Adds a data point to the chart series.
       */
      function addDataPoint() {
        lastVal = lastVal + (Math.round(Math.random() * 100) - 50);
        chart.series(0).points.add({ y: lastVal, x: new Date(dt) }, { shift: useShift });
        dt = dt + 24 * 3600000 * 1;
      }

      function shiftPoints_btnClick(shiftVal) {
        useShift = shiftVal;
      }

      function startUpdate() {
        INTERVAL_ID = setInterval(function() {
          if (cnt > 540) {
            clearInterval(INTERVAL_ID);
          }
          if (chart) {
            addDataPoint();
            cnt++;
          }
        }, 1000);
      }
    </script>
  </body>
</html>
