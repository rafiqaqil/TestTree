<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Average Line Chart | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />
    <style type="text/css"></style>
  </head>
  <body>
    <div id="chartDiv" style="max-width: 740px;height: 400px;margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
A computed line series with muted source lines for context.
Learn how to:

  - Draw an averaged line based on muted line series.
*/
      // JS
      var chart;

      JSC.fetch('./resources/laborForceUs.csv')
        .then(function(response) {
          return response.text();
        })
        .then(function(text) {
          var data = JSC.csv2Json(text, {
            coerce: function(d) {
              return {
                state: d.state,
                year: d.year,
                rate: (parseInt(d.unemployed) * 100) / parseInt(d.labor_force)
              };
            }
          }).filter(function(x) {
            return parseInt(x.year) > 1990;
          });

          chart = renderChart(makeSeries(data));
        });

      function renderChart(series) {
        return JSC.chart('chartDiv', {
          type: 'spline',
          title_label_text: 'Average US Unemployment Rate',
          yAxis: {
            alternateGridFill: 'none',
            defaultTick_label_text: '%value%',
            scale_range: [2, 14]
          },
          xAxis: {
            crosshair_enabled: true,
            scale_type: 'time',
            formatString: 'yyyy'
          },
          palette: ['#eeeeee'],
          defaultPoint: {
            marker: { visible: false, size: 15 },
            tooltip: '<hr>Total in US: <b>{%yValue:n2}%</b><br>Min Rate: <b>%min%</b><br>Max Rate: <b>%max%</b>'
          },
          legend_visible: false,
          defaultSeries: {
            mouseTracking_enabled: false,
            line_width: 1
          },
          series: series
        });
      }

      function makeSeries(data) {
        var states = JSC.nest()
          .key('state')
          .key('year')
          .pointRollup(function(key, val) {
            var values = val[0];
            return { x: values.year, y: values.rate };
          })
          .series(data);
        var total = {
          name: 'Total',
          mouseTracking_enabled: true,
          line_width: 3,
          states_hover_line_width: 3,
          color: 'royalblue',
          points: JSC.nest()
            .key('year')
            .pointRollup(function(key, val) {
              var values = val[0];
              var statesNames = val.map(function(a) {
                return a.state;
              });
              var rates = val.map(function(a) {
                return a.rate;
              });
              return {
                x: values.year,
                y: JSC.sum(val, 'rate') / val.length,
                attributes_max:
                  statesNames[rates.indexOf(JSC.max(val, 'rate'))] + ' ' + JSC.formatNumber(JSC.max(val, 'rate'), 'n2'),
                attributes_min:
                  statesNames[rates.indexOf(JSC.min(val, 'rate'))] + ' ' + JSC.formatNumber(JSC.min(val, 'rate'), 'n2')
              };
            })
            .points(data)
        };
        states.push(total);
        return states;
      }
    </script>
  </body>
</html>
