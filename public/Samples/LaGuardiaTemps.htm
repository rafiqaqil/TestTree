<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Interactive Weather Analysis Scatter Chart | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/modules/toolbar.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />
    <style type="text/css"></style>
  </head>
  <body>
    <div id="chartDiv" style="max-width: 740px;height: 500px;margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
A scatter chart with overlaying area and line series.
Learn how to:

  - Draw a styled scatter chart with overlays.
*/
      // JS
      var chart;

      JSC.fetch('./resources/NY_normals.csv')
        .then(function(response) {
          return response.text();
        })
        .then(function(text) {
          var data = JSC.csv2Json(text);
          chart = renderChart(data, 2019);
        });
      function renderChart(data, year) {
        return JSC.chart('chartDiv', {
          animation_duration: 1000,
          title_label_text:
            'Average daily temperature in New York (La Guardia Airport Station), normals and records (2012-2019)',
          palette: ['#b3e5fc', '#b3e5fc', '#81d4fa', '#4fc3f7'],
          defaultPoint: {
            tooltip: '%icon %seriesName: <b>%value°F</b>',
            focusGlow: { color: '#4fc3f7', opacity: 1 },
            legendEntry_visible: false,
            marker: {
              type: 'circle',
              outline_width: 0,
              size: 12
            }
          },
          axisToZoom: 'x',
          legend: {
            template: '%icon %name',
            position: 'bottom'
          },
          defaultAxis_line_visible: false,
          yAxis: {
            id: 'y1',
            label_text: 'Temperature (°F)',
            alternateGridFill: 'none'
          },
          xAxis: {
            scale: {
              type: 'time',
              zoomLimit_unit: 'month'
            },
            crosshair_enabled: true
          },
          toolbar_items: {
            export_visible: false,
            label: {
              label_text: 'Choose year:',
              position: 'inside top left',
              margin_left: 15,
              boxVisible: false
            },
            yearsList: {
              type: 'select',
              position: 'inside top left',
              value: '2019',
              items: makeYearsArray(data),
              events_change: function(val) {
                chart.zoom();
                chart.options({ series: getYearData(data, val) });
              }
            }
          },
          series: getYearData(data, 2019)
        });
      }
      function getYearData(dataIn, year) {
        var data = dataIn.filter(function(x) {
          return new Date(x.date).getFullYear() === parseInt(year);
        });
        var series = [
          {
            name: 'Records',
            type: 'area',
            defaultPoint_marker_visible: false,
            states_hover: { line_width: 0 },
            line_width: 0,
            opacity: 0.3,
            points: JSC.nest()
              .key('date')
              .pointRollup(function(key, val) {
                var values = val[0];
                return {
                  x: new Date(parseInt(key)),
                  y: [values.min_record, values.max_record],
                  tooltip: '%icon Record Low: <b>%yStart°F</b> , Record High: <b>%value°F</b>',
                  focusGlow_width: 0
                };
              })
              .points(
                data.filter(function(x) {
                  return new Date(x.date).getFullYear() === parseInt(year);
                })
              )
          },
          {
            name: 'Day temperature',
            type: 'marker',
            id: 'dayTemps',
            points: JSC.nest()
              .key('date')
              .pointRollup(function(key, val) {
                var values = val[0],
                  date = new Date(parseInt(key));
                return {
                  id: 'dtemps' + dayOfYear(date),
                  x: date,
                  y: values.tmp
                };
              })
              .points(data)
          },
          {
            name: 'Day temperature normals',
            type: 'area',
            id: 'dayTempNorms',
            defaultPoint_marker_visible: false,
            states_hover: { line_width: 0 },
            line_width: 0,
            opacity: 0.6,
            points: JSC.nest()
              .key('date')
              .pointRollup(function(key, val) {
                var values = val[0],
                  date = new Date(parseInt(key));
                return {
                  id: 'dtempN' + dayOfYear(date),
                  x: date,
                  y: [values.min_tmp, values.max_tmp],
                  tooltip: '%icon %seriesName: <b>[%yStart°F , %value°F]</b>',
                  focusGlow_width: 0
                };
              })
              .points(data)
          },
          {
            name: 'Day average ',
            type: 'line',
            defaultPoint_marker_visible: false,
            line_width: 3,
            points: JSC.nest()
              .key('date')
              .pointRollup(function(key, val) {
                var values = val[0];
                return {
                  x: new Date(parseInt(key)),
                  y: values.avg_tmp,
                  focusGlow_width: 0
                };
              })
              .points(data)
          }
        ];

        return series;

        function dayOfYear(date) {
          var start = new Date(date.getFullYear(), 0, 0);
          var diff = date - start;
          return Math.floor(diff / (24 * 3600000));
        }
      }

      function makeYearsArray(data) {
        var years = data.map(function(a) {
          return new Date(a.date).getFullYear();
        });
        var uniqueyears = years.filter(function(value, index) {
          return years.indexOf(value) === index;
        });
        return uniqueyears.sort().join(',');
      }
    </script>
  </body>
</html>
